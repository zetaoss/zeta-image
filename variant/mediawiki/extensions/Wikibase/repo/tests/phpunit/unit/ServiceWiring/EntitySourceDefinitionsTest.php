<?php

declare( strict_types = 1 );

namespace Wikibase\Repo\Tests\Unit\ServiceWiring;

use Wikibase\DataAccess\EntitySourceDefinitions;
use Wikibase\DataModel\Entity\Property;
use Wikibase\Lib\SettingsArray;
use Wikibase\Lib\SubEntityTypesMapper;
use Wikibase\Repo\Tests\Unit\ServiceWiringTestCase;

/**
 * @coversNothing
 *
 * @group Wikibase
 *
 * @license GPL-2.0-or-later
 */
class EntitySourceDefinitionsTest extends ServiceWiringTestCase {

	private function mockServices( array $settingsArray ) {
		$this->mockService( 'WikibaseRepo.SubEntityTypesMapper',
			new SubEntityTypesMapper( [] ) );
		$this->mockService( 'WikibaseRepo.Settings',
			new SettingsArray( $settingsArray ) );
	}

	public function testGetEntitySourceDefinitionsFromSettingsParsesSettings() {
		$settingsArray = [
			'federatedPropertiesEnabled' => false,
			'federatedPropertiesSourceScriptUrl' => 'https://www.wikidata.org/w/',
			'localEntitySourceName' => 'local',
			'entitySources' =>
				[
					'local' => [
						'entityNamespaces' => [ 'item' => 100, 'property' => 200 ],
						'repoDatabase' => false,
						'baseUri' => 'http://example.com/entity/',
						'rdfNodeNamespacePrefix' => 'wd',
						'rdfPredicateNamespacePrefix' => 'wdt',
						'interwikiPrefix' => 'localwiki'
					]
				]

		];
		$this->mockServices( $settingsArray );

		$sourceDefinitions = $this->getService( 'WikibaseRepo.EntitySourceDefinitions' );

		if ( $sourceDefinitions instanceof EntitySourceDefinitions ) {

			$itemSource = $sourceDefinitions->getDatabaseSourceForEntityType( 'item' );

			$this->assertSame( 'local', $itemSource->getSourceName() );
			$this->assertSame( 'http://example.com/entity/', $itemSource->getConceptBaseUri() );
			$this->assertSame( 'wdt', $itemSource->getRdfPredicateNamespacePrefix() );
			$this->assertSame( 'wd', $itemSource->getRdfNodeNamespacePrefix() );
			$this->assertSame( 'localwiki', $itemSource->getInterwikiPrefix() );
			$this->assertSame( [ 'item' => 100, 'property' => 200 ], $itemSource->getEntityNamespaceIds() );
			$this->assertSame( [ 'item' => 'main', 'property' => 'main' ], $itemSource->getEntitySlotNames() );
			$this->assertSame( [ 'item', 'property' ], $itemSource->getEntityTypes() );
		}
	}

	public function testGetEntitySourceDefinitionsFromSettingsInitializesFederatedPropertiesDefaults() {
		$itemNamespaceId = 120;
		$propertyNamespaceId = 122;
		$settingsArray = [
			'federatedPropertiesEnabled' => true,
			'federatedPropertiesSourceScriptUrl' => 'https://www.wikidata.org/w/',
			'entitySources' => [
				// what is generated by the closure in Wikibase.default.php
				'local' => [
					'entityNamespaces' => [ 'item' => $itemNamespaceId, 'property' => $propertyNamespaceId ],
					'repoDatabase' => 'testDb',
					'baseUri' => 'http://localhost/entity/',
					'rdfNodeNamespacePrefix' => 'wd',
					'rdfPredicateNamespacePrefix' => '',
					'interwikiPrefix' => '',
				]
			],
			'localEntitySourceName' => 'local',
		];
		$this->mockServices( $settingsArray );

		$sourceDefinitions = $this->getService( 'WikibaseRepo.EntitySourceDefinitions' );

		if ( $sourceDefinitions instanceof EntitySourceDefinitions ) {

			$itemSource = $sourceDefinitions->getDatabaseSourceForEntityType( 'item' );

			$this->assertSame( 'local', $itemSource->getSourceName() );
			$this->assertSame( 'http://localhost/entity/', $itemSource->getConceptBaseUri() );
			$this->assertSame( '', $itemSource->getRdfPredicateNamespacePrefix() );
			$this->assertSame( 'wd', $itemSource->getRdfNodeNamespacePrefix() );
			$this->assertSame( '', $itemSource->getInterwikiPrefix() );
			$this->assertArrayHasKey( 'item', $itemSource->getEntityNamespaceIds() );
			$this->assertArrayHasKey( 'property', $itemSource->getEntityNamespaceIds() );
			$this->assertSame( $itemNamespaceId, $itemSource->getEntityNamespaceIds()['item'] );
			$this->assertSame( $propertyNamespaceId, $itemSource->getEntityNamespaceIds()['property'] );
			$this->assertArrayHasKey( 'item', $itemSource->getEntitySlotNames() );
			$this->assertArrayHasKey( 'property', $itemSource->getEntitySlotNames() );
			$this->assertSame( 'main', $itemSource->getEntitySlotNames()['item'] );
			$this->assertSame( 'main', $itemSource->getEntitySlotNames()['property'] );
			$this->assertSame( [ 'item', 'property' ], $itemSource->getEntityTypes() );

			$propertySource = $sourceDefinitions->getApiSourceForEntityType( Property::ENTITY_TYPE );

			$this->assertSame( 'fedprops', $propertySource->getSourceName() );
			$this->assertSame( 'http://www.wikidata.org/entity/', $propertySource->getConceptBaseUri() );
			$this->assertSame( 'fpwd', $propertySource->getRdfPredicateNamespacePrefix() );
			$this->assertSame( 'fpwd', $propertySource->getRdfNodeNamespacePrefix() );
			$this->assertSame( 'wikidata', $propertySource->getInterwikiPrefix() );
			$this->assertSame( [ 'property' ], $propertySource->getEntityTypes() );
		}
	}

}
